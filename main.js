!function(){var t={1520:function(t,e,n){var r=n(1059),o=n(6017),i=TypeError;t.exports=function(t){if(r(t))return t;throw i(o(t)+" is not a function")}},9149:function(t,e,n){var r=n(6352),o=String,i=TypeError;t.exports=function(t){if(r(t))return t;throw i(o(t)+" is not an object")}},6307:function(t,e,n){var r=n(7655),o=n(328),i=n(6808),c=function(t){return function(e,n,c){var u,a=r(e),s=i(a),f=o(c,s);if(t&&n!=n){for(;s>f;)if((u=a[f++])!=u)return!0}else for(;s>f;f++)if((t||f in a)&&a[f]===n)return t||f||0;return!t&&-1}};t.exports={includes:c(!0),indexOf:c(!1)}},9914:function(t,e,n){var r=n(7362);t.exports=r([].slice)},2774:function(t,e,n){var r=n(7362),o=r({}.toString),i=r("".slice);t.exports=function(t){return i(o(t),8,-1)}},7198:function(t,e,n){var r=n(6867),o=n(1441),i=n(6633),c=n(2867);t.exports=function(t,e,n){for(var u=o(e),a=c.f,s=i.f,f=0;f<u.length;f++){var l=u[f];r(t,l)||n&&r(n,l)||a(t,l,s(e,l))}}},2949:function(t,e,n){var r=n(3622),o=n(2867),i=n(8066);t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},8066:function(t){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},7360:function(t,e,n){var r=n(6625),o=n(2867);t.exports=function(t,e,n){return n.get&&r(n.get,e,{getter:!0}),n.set&&r(n.set,e,{setter:!0}),o.f(t,e,n)}},9474:function(t,e,n){var r=n(1059),o=n(2867),i=n(6625),c=n(151);t.exports=function(t,e,n,u){u||(u={});var a=u.enumerable,s=void 0!==u.name?u.name:e;if(r(n)&&i(n,s,u),u.global)a?t[e]=n:c(e,n);else{try{u.unsafe?t[e]&&(a=!0):delete t[e]}catch(t){}a?t[e]=n:o.f(t,e,{value:n,enumerable:!1,configurable:!u.nonConfigurable,writable:!u.nonWritable})}return t}},151:function(t,e,n){var r=n(8461),o=Object.defineProperty;t.exports=function(t,e){try{o(r,t,{value:e,configurable:!0,writable:!0})}catch(n){r[t]=e}return e}},3622:function(t,e,n){var r=n(9105);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},2609:function(t,e,n){var r=n(8461),o=n(6352),i=r.document,c=o(i)&&o(i.createElement);t.exports=function(t){return c?i.createElement(t):{}}},57:function(t,e,n){var r=n(9734);t.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},150:function(t,e,n){var r=n(2774),o=n(8461);t.exports="process"==r(o.process)},9734:function(t,e,n){var r=n(1961);t.exports=r("navigator","userAgent")||""},1442:function(t,e,n){var r,o,i=n(8461),c=n(9734),u=i.process,a=i.Deno,s=u&&u.versions||a&&a.version,f=s&&s.v8;f&&(o=(r=f.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&c&&(!(r=c.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=c.match(/Chrome\/(\d+)/))&&(o=+r[1]),t.exports=o},2429:function(t){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},7740:function(t,e,n){var r=n(8461),o=n(6633).f,i=n(2949),c=n(9474),u=n(151),a=n(7198),s=n(6450);t.exports=function(t,e){var n,f,l,p,d,v=t.target,m=t.global,y=t.stat;if(n=m?r:y?r[v]||u(v,{}):(r[v]||{}).prototype)for(f in e){if(p=e[f],l=t.dontCallGetSet?(d=o(n,f))&&d.value:n[f],!s(m?f:v+(y?".":"#")+f,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;a(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),c(n,f,p,t)}}},9105:function(t){t.exports=function(t){try{return!!t()}catch(t){return!0}}},3363:function(t,e,n){var r=n(7098),o=Function.prototype,i=o.apply,c=o.call;t.exports="object"==typeof Reflect&&Reflect.apply||(r?c.bind(i):function(){return c.apply(i,arguments)})},5866:function(t,e,n){var r=n(7362),o=n(1520),i=n(7098),c=r(r.bind);t.exports=function(t,e){return o(t),void 0===e?t:i?c(t,e):function(){return t.apply(e,arguments)}}},7098:function(t,e,n){var r=n(9105);t.exports=!r((function(){var t=function(){}.bind();return"function"!=typeof t||t.hasOwnProperty("prototype")}))},4471:function(t,e,n){var r=n(7098),o=Function.prototype.call;t.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},3496:function(t,e,n){var r=n(3622),o=n(6867),i=Function.prototype,c=r&&Object.getOwnPropertyDescriptor,u=o(i,"name"),a=u&&"something"===function(){}.name,s=u&&(!r||r&&c(i,"name").configurable);t.exports={EXISTS:u,PROPER:a,CONFIGURABLE:s}},7362:function(t,e,n){var r=n(7098),o=Function.prototype,i=o.bind,c=o.call,u=r&&i.bind(c,c);t.exports=r?function(t){return t&&u(t)}:function(t){return t&&function(){return c.apply(t,arguments)}}},1961:function(t,e,n){var r=n(8461),o=n(1059);t.exports=function(t,e){return arguments.length<2?(n=r[t],o(n)?n:void 0):r[t]&&r[t][e];var n}},9260:function(t,e,n){var r=n(1520);t.exports=function(t,e){var n=t[e];return null==n?void 0:r(n)}},8461:function(t,e,n){var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n.g&&n.g)||function(){return this}()||Function("return this")()},6867:function(t,e,n){var r=n(7362),o=n(5555),i=r({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,e){return i(o(t),e)}},4507:function(t){t.exports={}},9939:function(t,e,n){var r=n(1961);t.exports=r("document","documentElement")},8319:function(t,e,n){var r=n(3622),o=n(9105),i=n(2609);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},9553:function(t,e,n){var r=n(7362),o=n(9105),i=n(2774),c=Object,u=r("".split);t.exports=o((function(){return!c("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?u(t,""):c(t)}:c},2588:function(t,e,n){var r=n(7362),o=n(1059),i=n(8047),c=r(Function.toString);o(i.inspectSource)||(i.inspectSource=function(t){return c(t)}),t.exports=i.inspectSource},7515:function(t,e,n){var r,o,i,c=n(6201),u=n(8461),a=n(7362),s=n(6352),f=n(2949),l=n(6867),p=n(8047),d=n(617),v=n(4507),m="Object already initialized",y=u.TypeError,b=u.WeakMap;if(c||p.state){var h=p.state||(p.state=new b),g=a(h.get),x=a(h.has),S=a(h.set);r=function(t,e){if(x(h,t))throw new y(m);return e.facade=t,S(h,t,e),e},o=function(t){return g(h,t)||{}},i=function(t){return x(h,t)}}else{var _=d("state");v[_]=!0,r=function(t,e){if(l(t,_))throw new y(m);return e.facade=t,f(t,_,e),e},o=function(t){return l(t,_)?t[_]:{}},i=function(t){return l(t,_)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!s(e)||(n=o(e)).type!==t)throw y("Incompatible receiver, "+t+" required");return n}}}},1059:function(t){t.exports=function(t){return"function"==typeof t}},6450:function(t,e,n){var r=n(9105),o=n(1059),i=/#|\.prototype\./,c=function(t,e){var n=a[u(t)];return n==f||n!=s&&(o(e)?r(e):!!e)},u=c.normalize=function(t){return String(t).replace(i,".").toLowerCase()},a=c.data={},s=c.NATIVE="N",f=c.POLYFILL="P";t.exports=c},6352:function(t,e,n){var r=n(1059);t.exports=function(t){return"object"==typeof t?null!==t:r(t)}},9565:function(t){t.exports=!1},183:function(t,e,n){var r=n(1961),o=n(1059),i=n(9559),c=n(7478),u=Object;t.exports=c?function(t){return"symbol"==typeof t}:function(t){var e=r("Symbol");return o(e)&&i(e.prototype,u(t))}},6808:function(t,e,n){var r=n(8972);t.exports=function(t){return r(t.length)}},6625:function(t,e,n){var r=n(9105),o=n(1059),i=n(6867),c=n(3622),u=n(3496).CONFIGURABLE,a=n(2588),s=n(7515),f=s.enforce,l=s.get,p=Object.defineProperty,d=c&&!r((function(){return 8!==p((function(){}),"length",{value:8}).length})),v=String(String).split("String"),m=t.exports=function(t,e,n){"Symbol("===String(e).slice(0,7)&&(e="["+String(e).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(e="get "+e),n&&n.setter&&(e="set "+e),(!i(t,"name")||u&&t.name!==e)&&(c?p(t,"name",{value:e,configurable:!0}):t.name=e),d&&n&&i(n,"arity")&&t.length!==n.arity&&p(t,"length",{value:n.arity});try{n&&i(n,"constructor")&&n.constructor?c&&p(t,"prototype",{writable:!1}):t.prototype&&(t.prototype=void 0)}catch(t){}var r=f(t);return i(r,"source")||(r.source=v.join("string"==typeof e?e:"")),t};Function.prototype.toString=m((function(){return o(this)&&l(this).source||a(this)}),"toString")},2319:function(t){var e=Math.ceil,n=Math.floor;t.exports=Math.trunc||function(t){var r=+t;return(r>0?n:e)(r)}},1630:function(t,e,n){var r=n(1442),o=n(9105);t.exports=!!Object.getOwnPropertySymbols&&!o((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},6201:function(t,e,n){var r=n(8461),o=n(1059),i=n(2588),c=r.WeakMap;t.exports=o(c)&&/native code/.test(i(c))},2867:function(t,e,n){var r=n(3622),o=n(8319),i=n(864),c=n(9149),u=n(4303),a=TypeError,s=Object.defineProperty,f=Object.getOwnPropertyDescriptor,l="enumerable",p="configurable",d="writable";e.f=r?i?function(t,e,n){if(c(t),e=u(e),c(n),"function"==typeof t&&"prototype"===e&&"value"in n&&d in n&&!n[d]){var r=f(t,e);r&&r[d]&&(t[e]=n.value,n={configurable:p in n?n[p]:r[p],enumerable:l in n?n[l]:r[l],writable:!1})}return s(t,e,n)}:s:function(t,e,n){if(c(t),e=u(e),c(n),o)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw a("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},6633:function(t,e,n){var r=n(3622),o=n(4471),i=n(3843),c=n(8066),u=n(7655),a=n(4303),s=n(6867),f=n(8319),l=Object.getOwnPropertyDescriptor;e.f=r?l:function(t,e){if(t=u(t),e=a(e),f)try{return l(t,e)}catch(t){}if(s(t,e))return c(!o(i.f,t,e),t[e])}},8286:function(t,e,n){var r=n(5774),o=n(2429).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},5907:function(t,e){e.f=Object.getOwnPropertySymbols},9559:function(t,e,n){var r=n(7362);t.exports=r({}.isPrototypeOf)},5774:function(t,e,n){var r=n(7362),o=n(6867),i=n(7655),c=n(6307).indexOf,u=n(4507),a=r([].push);t.exports=function(t,e){var n,r=i(t),s=0,f=[];for(n in r)!o(u,n)&&o(r,n)&&a(f,n);for(;e.length>s;)o(r,n=e[s++])&&(~c(f,n)||a(f,n));return f}},3843:function(t,e){"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,o=r&&!n.call({1:2},1);e.f=o?function(t){var e=r(this,t);return!!e&&e.enumerable}:n},3508:function(t,e,n){var r=n(4471),o=n(1059),i=n(6352),c=TypeError;t.exports=function(t,e){var n,u;if("string"===e&&o(n=t.toString)&&!i(u=r(n,t)))return u;if(o(n=t.valueOf)&&!i(u=r(n,t)))return u;if("string"!==e&&o(n=t.toString)&&!i(u=r(n,t)))return u;throw c("Can't convert object to primitive value")}},1441:function(t,e,n){var r=n(1961),o=n(7362),i=n(8286),c=n(5907),u=n(9149),a=o([].concat);t.exports=r("Reflect","ownKeys")||function(t){var e=i.f(u(t)),n=c.f;return n?a(e,n(t)):e}},8853:function(t,e,n){"use strict";var r=n(9149);t.exports=function(){var t=r(this),e="";return t.hasIndices&&(e+="d"),t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.unicodeSets&&(e+="v"),t.sticky&&(e+="y"),e}},376:function(t){var e=TypeError;t.exports=function(t){if(null==t)throw e("Can't call method on "+t);return t}},617:function(t,e,n){var r=n(415),o=n(2546),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},8047:function(t,e,n){var r=n(8461),o=n(151),i="__core-js_shared__",c=r[i]||o(i,{});t.exports=c},415:function(t,e,n){var r=n(9565),o=n(8047);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.23.5",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.23.5/LICENSE",source:"https://github.com/zloirock/core-js"})},1351:function(t,e,n){var r,o,i,c,u=n(8461),a=n(3363),s=n(5866),f=n(1059),l=n(6867),p=n(9105),d=n(9939),v=n(9914),m=n(2609),y=n(426),b=n(57),h=n(150),g=u.setImmediate,x=u.clearImmediate,S=u.process,_=u.Dispatch,w=u.Function,E=u.MessageChannel,j=u.String,O=0,C={},k="onreadystatechange";try{r=u.location}catch(t){}var P=function(t){if(l(C,t)){var e=C[t];delete C[t],e()}},q=function(t){return function(){P(t)}},L=function(t){P(t.data)},I=function(t){u.postMessage(j(t),r.protocol+"//"+r.host)};g&&x||(g=function(t){y(arguments.length,1);var e=f(t)?t:w(t),n=v(arguments,1);return C[++O]=function(){a(e,void 0,n)},o(O),O},x=function(t){delete C[t]},h?o=function(t){S.nextTick(q(t))}:_&&_.now?o=function(t){_.now(q(t))}:E&&!b?(c=(i=new E).port2,i.port1.onmessage=L,o=s(c.postMessage,c)):u.addEventListener&&f(u.postMessage)&&!u.importScripts&&r&&"file:"!==r.protocol&&!p(I)?(o=I,u.addEventListener("message",L,!1)):o=k in m("script")?function(t){d.appendChild(m("script"))[k]=function(){d.removeChild(this),P(t)}}:function(t){setTimeout(q(t),0)}),t.exports={set:g,clear:x}},328:function(t,e,n){var r=n(9637),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},7655:function(t,e,n){var r=n(9553),o=n(376);t.exports=function(t){return r(o(t))}},9637:function(t,e,n){var r=n(2319);t.exports=function(t){var e=+t;return e!=e||0===e?0:r(e)}},8972:function(t,e,n){var r=n(9637),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},5555:function(t,e,n){var r=n(376),o=Object;t.exports=function(t){return o(r(t))}},6443:function(t,e,n){var r=n(4471),o=n(6352),i=n(183),c=n(9260),u=n(3508),a=n(4761),s=TypeError,f=a("toPrimitive");t.exports=function(t,e){if(!o(t)||i(t))return t;var n,a=c(t,f);if(a){if(void 0===e&&(e="default"),n=r(a,t,e),!o(n)||i(n))return n;throw s("Can't convert object to primitive value")}return void 0===e&&(e="number"),u(t,e)}},4303:function(t,e,n){var r=n(6443),o=n(183);t.exports=function(t){var e=r(t,"string");return o(e)?e:e+""}},6017:function(t){var e=String;t.exports=function(t){try{return e(t)}catch(t){return"Object"}}},2546:function(t,e,n){var r=n(7362),o=0,i=Math.random(),c=r(1..toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+c(++o+i,36)}},7478:function(t,e,n){var r=n(1630);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},864:function(t,e,n){var r=n(3622),o=n(9105);t.exports=r&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},426:function(t){var e=TypeError;t.exports=function(t,n){if(t<n)throw e("Not enough arguments");return t}},4761:function(t,e,n){var r=n(8461),o=n(415),i=n(6867),c=n(2546),u=n(1630),a=n(7478),s=o("wks"),f=r.Symbol,l=f&&f.for,p=a?f:f&&f.withoutSetter||c;t.exports=function(t){if(!i(s,t)||!u&&"string"!=typeof s[t]){var e="Symbol."+t;u&&i(f,t)?s[t]=f[t]:s[t]=a&&l?l(e):p(e)}return s[t]}},9681:function(t,e,n){var r=n(8461),o=n(3622),i=n(7360),c=n(8853),u=n(9105),a=r.RegExp,s=a.prototype;o&&u((function(){var t=!0;try{a(".","d")}catch(e){t=!1}var e={},n="",r=t?"dgimsy":"gimsy",o=function(t,r){Object.defineProperty(e,t,{get:function(){return n+=r,!0}})},i={dotAll:"s",global:"g",ignoreCase:"i",multiline:"m",sticky:"y"};for(var c in t&&(i.hasIndices="d"),i)o(c,i[c]);return Object.getOwnPropertyDescriptor(s,"flags").get.call(e)!==r||n!==r}))&&i(s,"flags",{configurable:!0,get:c})},5670:function(t,e,n){var r=n(7740),o=n(8461),i=n(1351).clear;r({global:!0,bind:!0,enumerable:!0,forced:o.clearImmediate!==i},{clearImmediate:i})},8318:function(t,e,n){n(5670),n(1343)},1343:function(t,e,n){var r=n(7740),o=n(8461),i=n(1351).set;r({global:!0,bind:!0,enumerable:!0,forced:o.setImmediate!==i},{setImmediate:i})}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.p="",function(){"use strict";n(9681),n(8318);const t={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__error"},e=(t,e,n)=>{t.querySelector(`#${e.id}-error`).textContent="",e.classList.remove(n.inputErrorClass)},r=(t,e)=>{t.disabled=!0,t.classList.add(e.inactiveButtonClass)},o=(t,e,n)=>{(t=>t.some((t=>!t.validity.valid)))(t)?r(e,n):(e.disabled=!1,e.classList.remove(n.inactiveButtonClass))};var i=n.p+"d3610e9c6dce3cb370d8.svg",c=n.p+"04c411e519a1c6561568.jpg",u=n.p+"d38272e02bb4f1ab1c37.svg",a=n.p+"40608da7369d39bc1077.svg";const s=new class{constructor(t){let{baseUrl:e,headers:n}=t;this._baseUrl=e,this._headers=n}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}editUserInfo(t){let{name:e,about:n}=t;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:n})}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}addCard(t){let{name:e,link:n}=t;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:n})}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"04cc443a-c254-4d72-b68b-d6354f20ae65","Content-Type":"application/json"}});s.getAppInfo().then((t=>{let[e,n]=t;const{about:r,avatar:o,name:i,_id:c}=n;e.forEach((t=>{const e=P(t);k.append(e)}))})).catch(console.error),document.getElementById("header-logo").src=i,document.getElementById("profile-avatar").src=c,document.getElementById("edit-icon").src=u,document.getElementById("add-icon").src=a;const f=document.querySelector(".profile__edit-button"),l=document.querySelector(".profile__add-button"),p=document.querySelector(".profile__name"),d=document.querySelector(".profile__description"),v=document.querySelector("#edit-modal"),m=v.querySelector(".modal__form"),y=v.querySelector("#profile-name-input"),b=v.querySelector("#profile-description-input"),h=document.querySelector("#add-card-modal"),g=h.querySelector(".modal__form"),x=h.querySelector(".modal__submit-button"),S=h.querySelector("#add-card-link-input"),_=h.querySelector("#add-card-name-input"),w=document.querySelector("#preview-modal"),E=w.querySelector(".modal__image"),j=w.querySelector(".modal__caption"),O=document.querySelectorAll(".modal__close-button"),C=document.querySelector("#card-template"),k=document.querySelector(".cards__list");function P(t){const e=C.content.querySelector(".card").cloneNode(!0),n=e.querySelector(".card__title"),r=e.querySelector(".card__image"),o=e.querySelector(".card__like-button"),i=e.querySelector(".card__delete-button");return n.textContent=t.name,r.src=t.link,r.alt=t.name,o.addEventListener("click",(()=>{o.classList.toggle("card__like-button_liked")})),i.addEventListener("click",(()=>{e.remove()})),r.addEventListener("click",(()=>{q(w)})),e}function q(t){t.classList.add("modal_opened"),document.addEventListener("keydown",I),document.addEventListener("mousedown",T)}function L(t){t.classList.remove("modal_opened"),document.removeEventListener("keydown",I),document.removeEventListener("mousedown",T)}function I(t){"Escape"===t.key&&L(document.querySelector(".modal_opened"))}function T(t){t.target.classList.contains("modal")&&L(t.target)}var M;O.forEach((t=>{const e=t.closest(".modal");t.addEventListener("click",(()=>L(e)))})),f.addEventListener("click",(()=>{var n,r;y.value=p.textContent,b.value=d.textContent,n=m,r=t,[y,b].forEach((t=>{e(n,t,r)})),q(v)})),m.addEventListener("submit",(function(t){t.preventDefault(),s.editUserInfo({name:y.value,about:b.value}).then((t=>{p.textContent=t.name,d.textContent=t.about,L(v)})).catch(console.error)})),g.addEventListener("submit",(function(e){e.preventDefault(),s.addCard({name:_.value,link:S.value}).then((t=>{E.src=t.link,E.alt=t.name,j.textContent=t.name}));const n=P({name:_.value,link:S.value});k.prepend(n),e.target.reset(),r(x,t),L(h)})),l.addEventListener("click",(()=>{q(h)})),M=t,document.querySelectorAll(M.formSelector).forEach((t=>{((t,n)=>{const r=Array.from(t.querySelectorAll(n.inputSelector)),i=t.querySelector(n.submitButtonSelector);o(r,i,n),r.forEach((c=>{c.addEventListener("input",(function(){((t,n,r)=>{n.validity.valid?e(t,n,r):((t,e,n,r)=>{t.querySelector(`#${e.id}-error`).textContent=n,e.classList.add(r.inputErrorClass)})(t,n,n.validationMessage,r)})(t,c,n),o(r,i,n)}))}))})(t,M)}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,